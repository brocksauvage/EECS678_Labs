This is not a guarantee, as certain threads may or may not be scheduled and executed between sampling periods. Conversely, we may check on the progress of the program before any variables have actually been incremented. This would occur in cases where the "thinking" and "eating" actions are executed quickly enough so as to give the appearance that the times have remained the same.
The rate at which the thinking and eating processes are executed and processed can play a role as to how long the sampling period should be. Much of this is up to the number of cycles generated by the rand() function located within the code, as it can be up to 9999. To be sure if we have encountered deadlock, one wait for the amount of time it would take to get through 9999 cycles, and if deadlock is still present, then we have indeed encountered it.
It seems to be true that larger values of ACTIVE_DURATION make deadlock less likely to occur. After trying different values of ACTIVE_DURATION (staring with 200, then 500, 1000, and finally, 1500), it was very plain to see that there was a difference in the time it took to reach deadlock between 200 and 1500. I believe this is the case because when ACTIVE_DURATION is increased, the philosophers take longer to get through their thinking period. When done thinking, they will pick up their left chopstick to eat. If both the thinking and eating periods are short enough, we could enter a situation of circular waiting, where all philosophers grab the chopsticks to their left, incurring deadlock.
